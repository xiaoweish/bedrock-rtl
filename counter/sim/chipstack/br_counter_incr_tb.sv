
/*
*********************************************
**    File auto-generated by Chipstack.    **
*********************************************
*/

//=============================================================
// Testbench for Module: br_counter_incr
//=============================================================
// Author: ChipStack AI
// Date: 2024-10-25 00:52:52
// Description: Unit test for br_counter_incr
//=============================================================

//`timescale 1ns/1ps

module br_counter_incr_tb;
  //===========================================================
  // Testbench Parameters
  //===========================================================
  parameter CLOCK_FREQ = 100;  // Clock frequency in MHz
  parameter RESET_DURATION = 100;  // Reset duration in ns
  parameter TIMEOUT = 10000000;  // Timeout value in ns
  parameter PER_TASK_TIMEOUT = 1000000;  // Timeout value for each task in ns
  parameter DRAIN_TIME = 100;  // Time to observe all results in ns
  parameter CLOCK_FREQ_CONVERSION_FACTOR = 1000;  // Conversion factor for clock frequency

  //===========================================================
  // DUT Parameters
  //===========================================================
  parameter int MaxValue = 7;
  parameter int MaxIncrement = 1;
  localparam int ValueWidth = $clog2(MaxValue + 1);
  localparam int IncrementWidth = $clog2(MaxIncrement + 1);

  //===========================================================
  // Clock and Reset Signals
  //===========================================================
  logic clk;
  logic rst;

  //===========================================================
  // Other Signals and Variables
  //===========================================================
  logic reinit;
  logic [ValueWidth-1:0] initial_value;
  logic incr_valid;
  logic [IncrementWidth-1:0] incr;
  logic [ValueWidth-1:0] value;
  logic [ValueWidth-1:0] value_next;

  //===========================================================
  // DUT Instantiation
  //===========================================================
  br_counter_incr #(
      .MaxValue(MaxValue),
      .MaxIncrement(MaxIncrement)
  ) dut (
      .clk(clk),
      .rst(rst),
      .reinit(reinit),
      .initial_value(initial_value),
      .incr_valid(incr_valid),
      .incr(incr),
      .value(value),
      .value_next(value_next)
  );


  //===========================================================
  // Clock Generation
  //===========================================================
  initial begin
    clk = 1'b0;
    forever #(CLOCK_FREQ_CONVERSION_FACTOR / (2 * CLOCK_FREQ)) clk = ~clk;
  end

  //===========================================================
  // Timeout Control
  //===========================================================
  initial begin
    #(TIMEOUT);
    $display("Error: Testbench timeout!");
    $finish;
  end

  //===========================================================
  // Reset Generation
  //===========================================================
  task automatic reset_dut;
    // Set all the DUT inputs to zero, making sure there are no X/Z at the inputs.
    reinit = 'h0;
    initial_value = 'h0;
    incr_valid = 'h0;
    incr = 'h0;

    // Wiggling the reset signal.
    rst = 1'b0;
    #RESET_DURATION;
    rst = 1'b1;
    #RESET_DURATION;
    rst = 1'b0;
    #RESET_DURATION;
  endtask

  //===========================================================
  // Initial Block to Call Tasks
  //===========================================================
  initial begin
    $assertoff;
    reset_dut();
    test_ReinitializeCounter();

    reset_dut();
    test_IncrementCounter();

    reset_dut();
    test_HoldCounterValue();

    reset_dut();
    test_ReinitializeAndIncrement();

    reset_dut();
    test_IncrementWithZero();

    reset_dut();
    test_ReinitializeWithMaxValue();

    reset_dut();
    test_IncrementBeyondMaxValue();

    reset_dut();
    test_SequentialIncrementAndReinitialize();

    reset_dut();
    test_ContinuousIncrementWithConditionalReinitialize();

    reset_dut();
    test_IncrementCausesOverflow();

    reset_dut();
    test_IncrementWithMaxIncrement();

    reset_dut();
    test_ReinitializeWithIncrementCausingOverflow();

    reset_dut();
    test_ReinitializeWithZeroIncrement();

    reset_dut();
    test_IncrementToMaxValue();

    reset_dut();
    test_ReinitializeToZero();

    reset_dut();
    test_IncrementWithReinitAtBoundary();

    reset_dut();
    test_IncrementExceedsMaxIncrement();

    reset_dut();
    test_InitialValueExceedsMaxValue();

    reset_dut();
    test_IncrementAndInitialValueExceedLimits();

    $finish;
  end

  task automatic test_ReinitializeCounter;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_ReinitializeCounter", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_ReinitializeCounter. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        // This task tests the reinitialization functionality of the counter module.
        // It ensures that when the reinit signal is asserted, the counter resets to the initial_value.
        // Local variables declaration
        bit stimulus_s1 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] observed_value, observed_value_next;
        fork
          // Generate a random initial value for the test
          @(posedge clk);
          initial_value = $urandom() % (MaxValue + 1);
          $display(
              "Time: %0t, INFO: test_ReinitializeCounter - Driving values: reinit=0x%h, initial_value=0x%h, incr_valid=0x%h, incr=0x%h",
              $time, 1, initial_value, 0, 0);
          // Drive values to input ports for step 1
          reinit = 1;
          incr_valid = 0;
          incr = 0;
          @(posedge clk);
          reinit = 0;
          stimulus_s1 = 1;
          // Wait and compare expected output with observed output for step 1
          wait (stimulus_s1 == 1);
          $display("Time: %0t, INFO: test_ReinitializeCounter - observed the stimulus_s1.", $time);
          @(posedge clk);
          observed_value = value;
          observed_value_next = value_next;
          if (observed_value !== initial_value || observed_value_next !== initial_value) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_ReinitializeCounter - Detected mismatch. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                $time, initial_value, initial_value, observed_value, observed_value_next);
          end else begin
            $display(
                "Time: %0t, INFO: test_ReinitializeCounter - Output is as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                $time, initial_value, initial_value, observed_value, observed_value_next);
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_ReinitializeCounter", $time);
        end else begin
          $display("Time: %0t, FAILED: test_ReinitializeCounter", $time);
        end
        $display("Time: %0t, INFO: Finished: test_ReinitializeCounter", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_IncrementCounter;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_IncrementCounter", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_IncrementCounter. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        // This task tests the increment functionality of the counter module. It applies an increment
        // to the counter when incr_valid is high and checks if the counter value is updated correctly.
        // Local variables declaration
        bit stimulus_s1 = 0, stimulus_s2 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] expected_value_next, observed_value_next;
        logic [ValueWidth-1:0] expected_value, observed_value;
        logic [IncrementWidth-1:0] incr_value;
        fork
          // Generate a random increment value within the allowed range
          @(posedge clk);
          incr_value = $urandom_range(1, MaxIncrement);
          $display(
              "Time: %0t, INFO: test_IncrementCounter - Driving values: incr_valid=0x%h, incr=0x%h",
              $time, 1, incr_value);
          // Apply increment to the counter with incr_valid high
          incr_valid = 1;
          incr = incr_value;
          @(posedge clk);
          stimulus_s1 = 1;
          $display("Time: %0t, INFO: test_IncrementCounter - Waiting for counter update", $time);
          // Wait for the counter to update
          @(posedge clk);
          stimulus_s2 = 1;
          // Wait and compare expected output with observed output for step 1
          wait (stimulus_s1 == 1);
          $display("Time: %0t, INFO: test_IncrementCounter - observed the stimulus_s1.", $time);
          expected_value_next = value + incr_value;
          observed_value_next = value_next;
          if (expected_value_next != observed_value_next) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_IncrementCounter - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                $time, expected_value_next, observed_value_next);
          end else begin
            $display(
                "Time: %0t, INFO: test_IncrementCounter - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, expected_value_next, observed_value_next);
          end
          // Wait and compare expected output with observed output for step 2
          wait (stimulus_s2 == 1);
          $display("Time: %0t, INFO: test_IncrementCounter - observed the stimulus_s2.", $time);
          expected_value = expected_value_next;
          observed_value = value;
          if (expected_value != observed_value) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_IncrementCounter - Detected mismatch in value. Expected: 0x%h, Observed: 0x%h",
                $time, expected_value, observed_value);
          end else begin
            $display(
                "Time: %0t, INFO: test_IncrementCounter - Output value is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, expected_value, observed_value);
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_IncrementCounter", $time);
        end else begin
          $display("Time: %0t, FAILED: test_IncrementCounter", $time);
        end
        $display("Time: %0t, INFO: Finished: test_IncrementCounter", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_HoldCounterValue;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_HoldCounterValue", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_HoldCounterValue. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        // This task tests the scenario where the counter should hold its current value when both
        // reinit and incr_valid signals are low. It verifies that the counter does not change
        // state in this condition.
        // Local variables declaration
        bit stimulus_s1 = 0, stimulus_s2 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] initial_value, incr, value, value_next;
        logic reinit, incr_valid;
        fork
          // Step 1: Initialize the counter with random values and ensure both reinit and incr_valid are low.
          initial_value = $urandom();
          incr = $urandom();
          reinit = 0;
          incr_valid = 0;
          $display(
              "Time: %0t, INFO: test_HoldCounterValue - Driving values: reinit=0x%h, incr_valid=0x%h, initial_value=0x%h, incr=0x%h",
              $time, reinit, incr_valid, initial_value, incr);
          @(posedge clk);
          stimulus_s1 = 1;
          // Step 2: Maintain the counter state with reinit and incr_valid still low.
          reinit = 0;
          incr_valid = 0;
          $display(
              "Time: %0t, INFO: test_HoldCounterValue - Driving values: reinit=0x%h, incr_valid=0x%h",
              $time, reinit, incr_valid);
          @(posedge clk);
          stimulus_s2 = 1;
          // Wait and compare expected output with observed output for step 1
          wait (stimulus_s1 == 1);
          $display("Time: %0t, INFO: test_HoldCounterValue - observed the stimulus_s1.", $time);
          if (value != value_next) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_HoldCounterValue - Detected mismatch in value. Expected: 0x%h, Observed: 0x%h",
                $time, value, value_next);
          end else begin
            $display(
                "Time: %0t, INFO: test_HoldCounterValue - Output value is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, value, value_next);
          end
          // Wait and compare expected output with observed output for step 2
          wait (stimulus_s2 == 1);
          $display("Time: %0t, INFO: test_HoldCounterValue - observed the stimulus_s2.", $time);
          if (value != value_next) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_HoldCounterValue - Detected mismatch in value. Expected: 0x%h, Observed: 0x%h",
                $time, value, value_next);
          end else begin
            $display(
                "Time: %0t, INFO: test_HoldCounterValue - Output value is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, value, value_next);
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_HoldCounterValue", $time);
        end else begin
          $display("Time: %0t, FAILED: test_HoldCounterValue", $time);
        end
        $display("Time: %0t, INFO: Finished: test_HoldCounterValue", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_ReinitializeAndIncrement;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_ReinitializeAndIncrement", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_ReinitializeAndIncrement. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        bit stimulus_s1 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] initial_value;
        logic [IncrementWidth-1:0] incr;
        logic [ValueWidth-1:0] expected_value;
        fork
          // Removed redundant begin-end blocks
          // Generate random initial_value and incr within valid range
          initial_value = $urandom();
          incr = $urandom_range(0, MaxIncrement);
          // Drive reinit and incr_valid high with random initial_value and incr
          $display(
              "Time: %0t, INFO: test_ReinitializeAndIncrement - Driving values: reinit=0x%h, incr_valid=0x%h, initial_value=0x%h, incr=0x%h",
              $time, 1, 1, initial_value, incr);
          reinit = 1;
          incr_valid = 1;
          @(posedge clk);
          reinit = 0;
          incr_valid = 0;
          stimulus_s1 = 1;
          // Wait for stimulus_s1 and check expected output
          wait (stimulus_s1 == 1);
          $display("Time: %0t, INFO: test_ReinitializeAndIncrement - observed the stimulus_s1.",
                   $time);
          // Calculate expected value after reinitialization and increment
          expected_value = initial_value + incr;
          // Check if the observed value matches the expected value
          if (value !== expected_value || value_next !== expected_value) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_ReinitializeAndIncrement - Detected mismatch. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                $time, expected_value, expected_value, value, value_next);
          end else begin
            $display(
                "Time: %0t, INFO: test_ReinitializeAndIncrement - Output value and value_next are as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                $time, expected_value, expected_value, value, value_next);
          end
        join
        // Print pass/fail message based on is_pass flag
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_ReinitializeAndIncrement", $time);
        end else begin
          $display("Time: %0t, FAILED: test_ReinitializeAndIncrement", $time);
        end
        $display("Time: %0t, INFO: Finished: test_ReinitializeAndIncrement", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_IncrementWithZero;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_IncrementWithZero", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_IncrementWithZero. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        // This task tests the behavior of the counter when the increment value is zero.
        // The counter should hold its current value when incr_valid is high and incr is zero.
        // Local variables declaration
        bit stimulus_s1 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] expected_value, observed_value;
        fork
          begin : simulation_thread
            // Drive incr_valid high and incr to zero to test holding the current counter value
            $display(
                "Time: %0t, INFO: test_IncrementWithZero - Driving values: incr_valid=0x%h, incr=0x%h",
                $time, 1, 0);
            incr_valid = 1;
            incr = 0;
            @(posedge clk);
            stimulus_s1 = 1;
          end
          begin : check_thread
            // Wait for stimulus_s1 and then check if the counter holds its current value
            wait (stimulus_s1 == 1);
            $display("Time: %0t, INFO: test_IncrementWithZero - observed the stimulus_s1.", $time);
            expected_value = value;  // The expected value should be the current value
            observed_value = value_next;
            if (expected_value != observed_value) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementWithZero - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value, observed_value);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementWithZero - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value, observed_value);
            end
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_IncrementWithZero", $time);
        end else begin
          $display("Time: %0t, FAILED: test_IncrementWithZero", $time);
        end
        $display("Time: %0t, INFO: Finished: test_IncrementWithZero", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_ReinitializeWithMaxValue;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_ReinitializeWithMaxValue", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_ReinitializeWithMaxValue. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        // This task tests the behavior of the counter when the reinit signal is asserted with initial_value
        // equal to MaxValue. The counter should reset to MaxValue in the next clock cycle.
        // Local variables declaration
        bit stimulus_s1 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] observed_value, observed_value_next;
        fork
          // Apply reinit with initial_value equal to MaxValue to reset the counter
          begin : simulation_thread
            $display(
                "Time: %0t, INFO: test_ReinitializeWithMaxValue - Driving values: reinit=0x%h, initial_value=0x%h",
                $time, 1, MaxValue);
            reinit = 1;
            initial_value = MaxValue;
            @(posedge clk);
            reinit = 0;
            stimulus_s1 = 1;
          end
          // Wait and compare expected output with observed output for step 1
          begin : check_thread
            wait (stimulus_s1 == 1);
            $display("Time: %0t, INFO: test_ReinitializeWithMaxValue - observed the stimulus_s1.",
                     $time);
            observed_value = value;
            observed_value_next = value_next;
            if (observed_value != MaxValue || observed_value_next != MaxValue) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_ReinitializeWithMaxValue - Detected mismatch. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, MaxValue, MaxValue, observed_value, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_ReinitializeWithMaxValue - Output value and value_next are as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, MaxValue, MaxValue, observed_value, observed_value_next);
            end
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_ReinitializeWithMaxValue", $time);
        end else begin
          $display("Time: %0t, FAILED: test_ReinitializeWithMaxValue", $time);
        end
        $display("Time: %0t, INFO: Finished: test_ReinitializeWithMaxValue", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_IncrementBeyondMaxValue;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_IncrementBeyondMaxValue", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_IncrementBeyondMaxValue. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        // This task tests the behavior of the counter when it increments beyond its maximum value.
        // It verifies that the counter wraps around to zero and continues incrementing correctly.
        // Local variables declaration
        bit stimulus_s1 = 0, stimulus_s2 = 0, stimulus_s3 = 0;
        bit is_pass = 1;
        int incr;
        int expected_value, observed_value;
        int expected_value_next, observed_value_next;
        fork
          begin : simulation_thread
            // Step 1: Initialize the counter to MaxValue
            $display(
                "Time: %0t, INFO: test_IncrementBeyondMaxValue - Driving values: reinit=0x%h, initial_value=0x%h",
                $time, 1, MaxValue);
            reinit = 1;
            initial_value = MaxValue;
            @(posedge clk);
            reinit = 0;
            stimulus_s1 = 1;
            // Step 2: Apply a non-zero increment with incr_valid high to cause wrap around
            incr = $urandom_range(1, MaxIncrement);
            $display(
                "Time: %0t, INFO: test_IncrementBeyondMaxValue - Driving values: incr_valid=0x%h, incr=0x%h",
                $time, 1, incr);
            incr_valid = 1;
            @(posedge clk);
            incr_valid = 0;
            stimulus_s2 = 1;
            // Step 3: Continue incrementing to observe normal operation post-wrap around
            incr = $urandom_range(1, MaxIncrement);
            $display(
                "Time: %0t, INFO: test_IncrementBeyondMaxValue - Driving values: incr_valid=0x%h, incr=0x%h",
                $time, 1, incr);
            incr_valid = 1;
            @(posedge clk);
            incr_valid  = 0;
            stimulus_s3 = 1;
          end : simulation_thread
          begin : check_thread
            // Check expected output for step 1
            wait (stimulus_s1 == 1);
            $display("Time: %0t, INFO: test_IncrementBeyondMaxValue - observed the stimulus_s1.",
                     $time);
            expected_value = MaxValue;
            expected_value_next = MaxValue;
            observed_value = value;
            observed_value_next = value_next;
            if (expected_value != observed_value || expected_value_next != observed_value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementBeyondMaxValue - Detected mismatch. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementBeyondMaxValue - Output is as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end
            // Check expected output for step 2
            wait (stimulus_s2 == 1);
            $display("Time: %0t, INFO: test_IncrementBeyondMaxValue - observed the stimulus_s2.",
                     $time);
            expected_value = (MaxValue + incr) % (MaxValue + 1);
            expected_value_next = expected_value;
            observed_value = value;
            observed_value_next = value_next;
            if (expected_value != observed_value || expected_value_next != observed_value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementBeyondMaxValue - Detected mismatch. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementBeyondMaxValue - Output is as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end
            // Check expected output for step 3
            wait (stimulus_s3 == 1);
            $display("Time: %0t, INFO: test_IncrementBeyondMaxValue - observed the stimulus_s3.",
                     $time);
            expected_value = (expected_value + incr) % (MaxValue + 1);
            expected_value_next = expected_value;
            observed_value = value;
            observed_value_next = value_next;
            if (expected_value != observed_value || expected_value_next != observed_value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementBeyondMaxValue - Detected mismatch. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementBeyondMaxValue - Output is as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end
          end : check_thread
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_IncrementBeyondMaxValue", $time);
        end else begin
          $display("Time: %0t, FAILED: test_IncrementBeyondMaxValue", $time);
        end
        $display("Time: %0t, INFO: Finished: test_IncrementBeyondMaxValue", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_SequentialIncrementAndReinitialize;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_SequentialIncrementAndReinitialize", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_SequentialIncrementAndReinitialize. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        bit stimulus_s1 = 0, stimulus_s2 = 0, stimulus_s3 = 0, stimulus_s4 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] expected_value, observed_value;
        logic [ValueWidth-1:0] initial_value;
        logic [IncrementWidth-1:0] incr;
        logic [ValueWidth-1:0] value_next_expected;
        fork
          begin : simulation_thread
            incr = $urandom_range(0, MaxIncrement);
            $display(
                "Time: %0t, INFO: test_SequentialIncrementAndReinitialize - Driving values: incr_valid=0x%h, incr=0x%h",
                $time, 1, incr);
            incr_valid = 1;
            @(posedge clk);
            stimulus_s1 = 1;
            $display(
                "Time: %0t, INFO: test_SequentialIncrementAndReinitialize - Driving values: incr_valid=0x%h",
                $time, 1);
            @(posedge clk);
            stimulus_s2 = 1;
            $display(
                "Time: %0t, INFO: test_SequentialIncrementAndReinitialize - Driving values: incr_valid=0x%h",
                $time, 1);
            @(posedge clk);
            stimulus_s3   = 1;
            initial_value = $urandom_range(0, MaxValue);
            $display(
                "Time: %0t, INFO: test_SequentialIncrementAndReinitialize - Driving values: reinit=0x%h, initial_value=0x%h",
                $time, 1, initial_value);
            reinit = 1;
            @(posedge clk);
            stimulus_s4 = 1;
          end : simulation_thread
          begin : check_thread
            wait (stimulus_s1 == 1);
            $display(
                "Time: %0t, INFO: test_SequentialIncrementAndReinitialize - observed the stimulus_s1.",
                $time);
            value_next_expected = value + incr;
            if (value_next_expected != value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_SequentialIncrementAndReinitialize - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                  $time, value_next_expected, value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_SequentialIncrementAndReinitialize - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, value_next_expected, value_next);
            end
            wait (stimulus_s2 == 1);
            $display(
                "Time: %0t, INFO: test_SequentialIncrementAndReinitialize - observed the stimulus_s2.",
                $time);
            value_next_expected = value + incr;
            if (value_next_expected != value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_SequentialIncrementAndReinitialize - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                  $time, value_next_expected, value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_SequentialIncrementAndReinitialize - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, value_next_expected, value_next);
            end
            wait (stimulus_s3 == 1);
            $display(
                "Time: %0t, INFO: test_SequentialIncrementAndReinitialize - observed the stimulus_s3.",
                $time);
            value_next_expected = value + incr;
            if (value_next_expected != value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_SequentialIncrementAndReinitialize - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                  $time, value_next_expected, value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_SequentialIncrementAndReinitialize - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, value_next_expected, value_next);
            end
            wait (stimulus_s4 == 1);
            $display(
                "Time: %0t, INFO: test_SequentialIncrementAndReinitialize - observed the stimulus_s4.",
                $time);
            if (initial_value != value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_SequentialIncrementAndReinitialize - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                  $time, initial_value, value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_SequentialIncrementAndReinitialize - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, initial_value, value_next);
            end
          end : check_thread
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_SequentialIncrementAndReinitialize", $time);
        end else begin
          $display("Time: %0t, FAILED: test_SequentialIncrementAndReinitialize", $time);
        end
        $display("Time: %0t, INFO: Finished: test_SequentialIncrementAndReinitialize", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_ContinuousIncrementWithConditionalReinitialize;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_ContinuousIncrementWithConditionalReinitialize",
                 $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_ContinuousIncrementWithConditionalReinitialize. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        // This task tests the behavior of the counter module by continuously incrementing the counter
        // and conditionally reinitializing it to a new initial value while ensuring the expected
        // outputs match the observed outputs.
        // Local variables declaration
        bit stimulus_s1 = 0, stimulus_s2 = 0, stimulus_s3 = 0, stimulus_s4 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] initial_value, value, value_next;
        logic [IncrementWidth-1:0] incr;
        fork
          // Removed redundant begin-end block
          // Step 1: Initialize the counter with a specific initial value and increment continuously.
          initial_value = $urandom_range(0, MaxValue);
          incr = $urandom_range(1, MaxIncrement);
          $display(
              "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - Driving values: reinit=0x%h, initial_value=0x%h, incr_valid=0x%h, incr=0x%h",
              $time, 1, initial_value, 1, incr);
          reinit = 1;
          initial_value = initial_value;
          incr_valid = 1;
          incr = incr;
          @(posedge clk);
          reinit = 0;
          stimulus_s1 = 1;
          // Step 2: Continue incrementing the counter by the specified increment value.
          incr = $urandom_range(1, MaxIncrement);
          $display(
              "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - Driving values: incr_valid=0x%h, incr=0x%h",
              $time, 1, incr);
          incr_valid = 1;
          incr = incr;
          @(posedge clk);
          stimulus_s2 = 1;
          // Step 3: Conditionally reinitialize the counter to a new initial value while incrementing.
          initial_value = $urandom_range(0, MaxValue);
          incr = $urandom_range(1, MaxIncrement);
          $display(
              "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - Driving values: reinit=0x%h, initial_value=0x%h, incr_valid=0x%h, incr=0x%h",
              $time, 1, initial_value, 1, incr);
          reinit = 1;
          initial_value = initial_value;
          incr_valid = 1;
          incr = incr;
          @(posedge clk);
          reinit = 0;
          stimulus_s3 = 1;
          // Step 4: Continue incrementing the counter after reinitialization.
          incr = $urandom_range(1, MaxIncrement);
          $display(
              "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - Driving values: incr_valid=0x%h, incr=0x%h",
              $time, 1, incr);
          incr_valid = 1;
          incr = incr;
          @(posedge clk);
          stimulus_s4 = 1;
          // Removed redundant begin-end block
          // Check for Step 1
          wait (stimulus_s1 == 1);
          $display(
              "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - observed the stimulus_s1.",
              $time);
          if (value !== initial_value) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_ContinuousIncrementWithConditionalReinitialize - Detected mismatch in value. Expected: 0x%h, Observed: 0x%h",
                $time, initial_value, value);
          end else begin
            $display(
                "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - Output value is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, initial_value, value);
          end
          if (value_next !== (initial_value + incr)) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_ContinuousIncrementWithConditionalReinitialize - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                $time, (initial_value + incr), value_next);
          end else begin
            $display(
                "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, (initial_value + incr), value_next);
          end
          // Check for Step 2
          wait (stimulus_s2 == 1);
          $display(
              "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - observed the stimulus_s2.",
              $time);
          if (value !== value_next) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_ContinuousIncrementWithConditionalReinitialize - Detected mismatch in value. Expected: 0x%h, Observed: 0x%h",
                $time, value_next, value);
          end else begin
            $display(
                "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - Output value is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, value_next, value);
          end
          if (value_next !== (value + incr)) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_ContinuousIncrementWithConditionalReinitialize - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                $time, (value + incr), value_next);
          end else begin
            $display(
                "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, (value + incr), value_next);
          end
          // Check for Step 3
          wait (stimulus_s3 == 1);
          $display(
              "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - observed the stimulus_s3.",
              $time);
          if (value !== initial_value) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_ContinuousIncrementWithConditionalReinitialize - Detected mismatch in value. Expected: 0x%h, Observed: 0x%h",
                $time, initial_value, value);
          end else begin
            $display(
                "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - Output value is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, initial_value, value);
          end
          if (value_next !== (initial_value + incr)) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_ContinuousIncrementWithConditionalReinitialize - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                $time, (initial_value + incr), value_next);
          end else begin
            $display(
                "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, (initial_value + incr), value_next);
          end
          // Check for Step 4
          wait (stimulus_s4 == 1);
          $display(
              "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - observed the stimulus_s4.",
              $time);
          if (value !== value_next) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_ContinuousIncrementWithConditionalReinitialize - Detected mismatch in value. Expected: 0x%h, Observed: 0x%h",
                $time, value_next, value);
          end else begin
            $display(
                "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - Output value is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, value_next, value);
          end
          if (value_next !== (value + incr)) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_ContinuousIncrementWithConditionalReinitialize - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                $time, (value + incr), value_next);
          end else begin
            $display(
                "Time: %0t, INFO: test_ContinuousIncrementWithConditionalReinitialize - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, (value + incr), value_next);
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_ContinuousIncrementWithConditionalReinitialize", $time);
        end else begin
          $display("Time: %0t, FAILED: test_ContinuousIncrementWithConditionalReinitialize", $time);
        end
        $display("Time: %0t, INFO: Finished: test_ContinuousIncrementWithConditionalReinitialize",
                 $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_IncrementCausesOverflow;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_IncrementCausesOverflow", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_IncrementCausesOverflow. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        // This task tests the behavior of the counter when an increment causes it to overflow.
        // It verifies that the counter wraps around to zero and continues incrementing correctly.
        // Local variables declaration
        bit stimulus_s1 = 0, stimulus_s2 = 0, stimulus_s3 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] expected_value, observed_value;
        logic [ValueWidth-1:0] expected_value_next, observed_value_next;
        fork
          begin : simulation_thread
            // Step 1: Initialize the counter near MaxValue and prepare for increment.
            $display(
                "Time: %0t, INFO: test_IncrementCausesOverflow - Driving values: initial_value=0x%h, reinit=0x%h, incr_valid=0x%h, incr=0x%h",
                $time, MaxValue - 1, 1, 0, 0);
            initial_value = MaxValue - 1;
            reinit = 1;
            incr_valid = 0;
            incr = 0;
            @(posedge clk);
            reinit = 0;
            stimulus_s1 = 1;
            // Step 2: Apply increment that causes overflow.
            $display(
                "Time: %0t, INFO: test_IncrementCausesOverflow - Driving values: incr_valid=0x%h, incr=0x%h",
                $time, 1, 2);
            incr_valid = 1;
            incr = 2;
            @(posedge clk);
            incr_valid  = 0;
            stimulus_s2 = 1;
            // Step 3: Verify counter continues incrementing after overflow.
            $display(
                "Time: %0t, INFO: test_IncrementCausesOverflow - Driving values: incr_valid=0x%h, incr=0x%h",
                $time, 1, 1);
            incr_valid = 1;
            incr = 1;
            @(posedge clk);
            incr_valid  = 0;
            stimulus_s3 = 1;
          end : simulation_thread
          begin : check_thread
            // Check expected output for step 1
            wait (stimulus_s1 == 1);
            $display("Time: %0t, INFO: test_IncrementCausesOverflow - observed the stimulus_s1.",
                     $time);
            expected_value = MaxValue - 1;
            expected_value_next = MaxValue - 1;
            observed_value = value;
            observed_value_next = value_next;
            if (expected_value != observed_value || expected_value_next != observed_value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementCausesOverflow - Detected mismatch in value or value_next. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementCausesOverflow - Output value and value_next are as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end
            // Check expected output for step 2
            wait (stimulus_s2 == 1);
            $display("Time: %0t, INFO: test_IncrementCausesOverflow - observed the stimulus_s2.",
                     $time);
            expected_value = 1;
            expected_value_next = 1;
            observed_value = value;
            observed_value_next = value_next;
            if (expected_value != observed_value || expected_value_next != observed_value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementCausesOverflow - Detected mismatch in value or value_next. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementCausesOverflow - Output value and value_next are as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end
            // Check expected output for step 3
            wait (stimulus_s3 == 1);
            $display("Time: %0t, INFO: test_IncrementCausesOverflow - observed the stimulus_s3.",
                     $time);
            expected_value = 2;
            expected_value_next = 2;
            observed_value = value;
            observed_value_next = value_next;
            if (expected_value != observed_value || expected_value_next != observed_value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementCausesOverflow - Detected mismatch in value or value_next. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementCausesOverflow - Output value and value_next are as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end
          end : check_thread
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_IncrementCausesOverflow", $time);
        end else begin
          $display("Time: %0t, FAILED: test_IncrementCausesOverflow", $time);
        end
        $display("Time: %0t, INFO: Finished: test_IncrementCausesOverflow", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_IncrementWithMaxIncrement;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_IncrementWithMaxIncrement", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_IncrementWithMaxIncrement. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        // This task tests the behavior of the counter when the increment signal is set to the maximum
        // allowable value. It checks if the counter increments correctly and wraps around when necessary.
        // Local variables declaration
        bit stimulus_s1 = 0, stimulus_s2 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] expected_value_next, expected_value;
        logic [ValueWidth-1:0] observed_value_next, observed_value;
        fork
          begin : simulation_thread
            // Step 1: Apply maximum increment to the counter
            $display(
                "Time: %0t, INFO: test_IncrementWithMaxIncrement - Driving values: incr_valid=0x%h, incr=0x%h",
                $time, 1, MaxIncrement);
            incr_valid = 1;
            incr = MaxIncrement;
            @(posedge clk);
            stimulus_s1 = 1;
            // Step 2: Check if the counter value wraps around if necessary
            $display(
                "Time: %0t, INFO: test_IncrementWithMaxIncrement - Waiting for next clock cycle",
                $time);
            @(posedge clk);
            stimulus_s2 = 1;
          end
          begin : check_thread
            // Wait and compare expected output with observed output for step 1
            wait (stimulus_s1 == 1);
            $display("Time: %0t, INFO: test_IncrementWithMaxIncrement - Observed the stimulus_s1.",
                     $time);
            expected_value_next = (value + MaxIncrement) % (MaxValue + 1);
            observed_value_next = value_next;
            if (expected_value_next != observed_value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementWithMaxIncrement - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value_next, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementWithMaxIncrement - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value_next, observed_value_next);
            end
            // Wait and compare expected output with observed output for step 2
            wait (stimulus_s2 == 1);
            $display("Time: %0t, INFO: test_IncrementWithMaxIncrement - Observed the stimulus_s2.",
                     $time);
            expected_value = (value + MaxIncrement) % (MaxValue + 1);
            observed_value = value;
            if (expected_value != observed_value) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementWithMaxIncrement - Detected mismatch in value. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value, observed_value);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementWithMaxIncrement - Output value is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value, observed_value);
            end
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_IncrementWithMaxIncrement", $time);
        end else begin
          $display("Time: %0t, FAILED: test_IncrementWithMaxIncrement", $time);
        end
        $display("Time: %0t, INFO: Finished: test_IncrementWithMaxIncrement", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_ReinitializeWithIncrementCausingOverflow;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_ReinitializeWithIncrementCausingOverflow", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_ReinitializeWithIncrementCausingOverflow. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        bit stimulus_s1 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] initial_value;
        logic [IncrementWidth-1:0] incr;
        logic [ValueWidth-1:0] expected_value;
        fork
          begin : simulation_thread
            initial_value = $urandom_range(0, MaxValue);
            incr = $urandom_range(MaxValue - initial_value + 1, MaxIncrement);
            $display(
                "Time: %0t, INFO: test_ReinitializeWithIncrementCausingOverflow - Driving values: reinit=0x%h, incr_valid=0x%h, initial_value=0x%h, incr=0x%h",
                $time, 1, 1, initial_value, incr);
            reinit = 1;
            incr_valid = 1;
            @(posedge clk);
            reinit = 0;
            incr_valid = 0;
            stimulus_s1 = 1;
          end
          begin : check_thread
            wait (stimulus_s1 == 1);
            $display(
                "Time: %0t, INFO: test_ReinitializeWithIncrementCausingOverflow - observed the stimulus_s1.",
                $time);
            expected_value = (initial_value + incr) % (MaxValue + 1);
            if (value !== expected_value || value_next !== expected_value) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_ReinitializeWithIncrementCausingOverflow - Detected mismatch. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value, value, value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_ReinitializeWithIncrementCausingOverflow - Output value and value_next are as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value, value, value_next);
            end
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_ReinitializeWithIncrementCausingOverflow", $time);
        end else begin
          $display("Time: %0t, FAILED: test_ReinitializeWithIncrementCausingOverflow", $time);
        end
        $display("Time: %0t, INFO: Finished: test_ReinitializeWithIncrementCausingOverflow", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_ReinitializeWithZeroIncrement;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_ReinitializeWithZeroIncrement", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_ReinitializeWithZeroIncrement. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        bit stimulus_s1 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] expected_value, observed_value;
        logic [ValueWidth-1:0] expected_value_next, observed_value_next;
        fork
          begin : simulation_thread
            $display(
                "Time: %0t, INFO: test_ReinitializeWithZeroIncrement - Driving values: reinit=0x%h, incr_valid=0x%h, initial_value=0x%h, incr=0x%h",
                $time, 1, 1, 0, 0);
            reinit = 1;
            incr_valid = 1;
            initial_value = 0;
            incr = 0;
            @(posedge clk);
            stimulus_s1 = 1;
            $display(
                "Time: %0t, INFO: test_ReinitializeWithZeroIncrement - Driving values: reinit=0x%h, incr_valid=0x%h",
                $time, 0, 0);
            reinit = 0;
            incr_valid = 0;
          end
          begin : check_thread
            wait (stimulus_s1 == 1);
            $display(
                "Time: %0t, INFO: test_ReinitializeWithZeroIncrement - observed the stimulus_s1.",
                $time);
            expected_value = 0;
            expected_value_next = 0;
            observed_value = value;
            observed_value_next = value_next;
            if (expected_value !== observed_value) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_ReinitializeWithZeroIncrement - Detected mismatch in value. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value, observed_value);
            end else begin
              $display(
                  "Time: %0t, INFO: test_ReinitializeWithZeroIncrement - Output value is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value, observed_value);
            end
            if (expected_value_next !== observed_value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_ReinitializeWithZeroIncrement - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value_next, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_ReinitializeWithZeroIncrement - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value_next, observed_value_next);
            end
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_ReinitializeWithZeroIncrement", $time);
        end else begin
          $display("Time: %0t, FAILED: test_ReinitializeWithZeroIncrement", $time);
        end
        $display("Time: %0t, INFO: Finished: test_ReinitializeWithZeroIncrement", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_IncrementToMaxValue;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_IncrementToMaxValue", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_IncrementToMaxValue. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        bit stimulus_s1 = 0, stimulus_s2 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] observed_value, observed_value_next;
        logic [ValueWidth-1:0] expected_value, expected_value_next;
        fork
          begin : simulation_thread
            $display(
                "Time: %0t, INFO: test_IncrementToMaxValue - Driving values: reinit=0x%h, initial_value=0x%h, incr_valid=0x%h, incr=0x%h",
                $time, 1, MaxValue - 1, 0, 0);
            reinit = 1;
            initial_value = MaxValue - 1;
            incr_valid = 0;
            incr = 0;
            @(posedge clk);
            reinit = 0;
            stimulus_s1 = 1;
            $display(
                "Time: %0t, INFO: test_IncrementToMaxValue - Driving values: incr_valid=0x%h, incr=0x%h",
                $time, 1, 1);
            incr_valid = 1;
            incr = 1;
            @(posedge clk);
            incr_valid  = 0;
            stimulus_s2 = 1;
          end
          begin : check_thread
            wait (stimulus_s1 == 1);
            $display("Time: %0t, INFO: test_IncrementToMaxValue - observed the stimulus_s1.",
                     $time);
            expected_value = MaxValue - 1;
            expected_value_next = MaxValue - 1;
            observed_value = value;
            observed_value_next = value_next;
            if (expected_value != observed_value || expected_value_next != observed_value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementToMaxValue - Detected mismatch. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementToMaxValue - Output is as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end
            wait (stimulus_s2 == 1);
            $display("Time: %0t, INFO: test_IncrementToMaxValue - observed the stimulus_s2.",
                     $time);
            expected_value = MaxValue;
            expected_value_next = MaxValue;
            observed_value = value;
            observed_value_next = value_next;
            if (expected_value != observed_value || expected_value_next != observed_value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementToMaxValue - Detected mismatch. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementToMaxValue - Output is as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value_next, observed_value, observed_value_next);
            end
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_IncrementToMaxValue", $time);
        end else begin
          $display("Time: %0t, FAILED: test_IncrementToMaxValue", $time);
        end
        $display("Time: %0t, INFO: Finished: test_IncrementToMaxValue", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_ReinitializeToZero;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_ReinitializeToZero", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_ReinitializeToZero. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        // This task tests the reinitialization of the counter to zero when the `reinit` signal is asserted.
        // It verifies that the counter resets to zero in the next clock cycle when `initial_value` is set to 0.
        // Local variables declaration
        bit stimulus_s1 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] observed_value, observed_value_next;
        fork
          begin : simulation_thread
            // Drive reinit, initial_value, incr_valid, and incr for the first step
            $display(
                "Time: %0t, INFO: test_ReinitializeToZero - Driving values: reinit=0x%h, initial_value=0x%h, incr_valid=0x%h, incr=0x%h",
                $time, 1, 0, 0, $urandom());
            reinit = 1;
            initial_value = 0;
            incr_valid = 0;
            incr = $urandom();
            @(posedge clk);
            reinit = 0;
            stimulus_s1 = 1;
          end
          begin : check_thread
            // Wait and compare expected output with observed output for step 1
            wait (stimulus_s1 == 1);
            $display("Time: %0t, INFO: test_ReinitializeToZero - observed the stimulus_s1.", $time);
            @(posedge clk);
            observed_value = value;
            observed_value_next = value_next;
            if (observed_value !== 0 || observed_value_next !== 0) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_ReinitializeToZero - Detected mismatch. Expected value: 0x%h, Observed value: 0x%h",
                  $time, 0, observed_value);
              $display(
                  "Time: %0t, ERROR: test_ReinitializeToZero - Detected mismatch. Expected value_next: 0x%h, Observed value_next: 0x%h",
                  $time, 0, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_ReinitializeToZero - Output value is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, 0, observed_value);
              $display(
                  "Time: %0t, INFO: test_ReinitializeToZero - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, 0, observed_value_next);
            end
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_ReinitializeToZero", $time);
        end else begin
          $display("Time: %0t, FAILED: test_ReinitializeToZero", $time);
        end
        $display("Time: %0t, INFO: Finished: test_ReinitializeToZero", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_IncrementWithReinitAtBoundary;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_IncrementWithReinitAtBoundary", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_IncrementWithReinitAtBoundary. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        bit stimulus_s1 = 0, stimulus_s2 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] initial_value;
        logic [IncrementWidth-1:0] incr;
        logic [ValueWidth-1:0] expected_value;
        fork
          begin : simulation_thread
            initial_value = $urandom_range(0, MaxValue);
            incr = $urandom_range(0, MaxIncrement);
            $display(
                "Time: %0t, INFO: test_IncrementWithReinitAtBoundary - Driving values: reinit=0x%h, incr_valid=0x%h, initial_value=0x%h, incr=0x%h",
                $time, 1, 1, initial_value, incr);
            reinit = 1;
            incr_valid = 1;
            @(posedge clk);
            stimulus_s1 = 1;
            $display(
                "Time: %0t, INFO: test_IncrementWithReinitAtBoundary - Driving values: reinit=0x%h, incr_valid=0x%h",
                $time, 0, 0);
            reinit = 0;
            incr_valid = 0;
            @(posedge clk);
            stimulus_s2 = 1;
          end
          begin : check_thread
            wait (stimulus_s2 == 1);
            $display(
                "Time: %0t, INFO: test_IncrementWithReinitAtBoundary - observed the stimulus_s2.",
                $time);
            expected_value = (initial_value + incr) % (MaxValue + 1);
            if (value !== expected_value || value_next !== expected_value) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementWithReinitAtBoundary - Detected mismatch. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value, value, value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementWithReinitAtBoundary - Output is as expected. Expected: value=0x%h, value_next=0x%h, Observed: value=0x%h, value_next=0x%h",
                  $time, expected_value, expected_value, value, value_next);
            end
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_IncrementWithReinitAtBoundary", $time);
        end else begin
          $display("Time: %0t, FAILED: test_IncrementWithReinitAtBoundary", $time);
        end
        $display("Time: %0t, INFO: Finished: test_IncrementWithReinitAtBoundary", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_IncrementExceedsMaxIncrement;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_IncrementExceedsMaxIncrement", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_IncrementExceedsMaxIncrement. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        // This task tests the behavior of the counter when an increment value exceeds MaxIncrement.
        // It checks that an assertion is triggered but the counter continues operation without automatic response.
        // Local variables declaration
        bit stimulus_s1 = 0, stimulus_s2 = 0;
        bit is_pass = 1;
        logic [ValueWidth-1:0] expected_value_next;
        logic [ValueWidth-1:0] observed_value_next;
        fork
          // Step 1: Apply a valid increment that exceeds MaxIncrement to test assertion handling.
          $display(
              "Time: %0t, INFO: test_IncrementExceedsMaxIncrement - Driving values: incr_valid=0x%h, incr=0x%h",
              $time, 1, MaxIncrement + 1);
          incr_valid = 1;
          incr = MaxIncrement + 1;
          @(posedge clk);
          stimulus_s1 = 1;
          // Step 2: Check that the counter continues operation without automatic response despite the assertion.
          $display(
              "Time: %0t, INFO: test_IncrementExceedsMaxIncrement - Driving values: incr_valid=0x%h, incr=0x%h",
              $time, 0, 0);
          incr_valid = 0;
          incr = 0;
          @(posedge clk);
          stimulus_s2 = 1;
          // Wait and compare expected output with observed output for step 1 if simulation step 1 has any expected output
          wait (stimulus_s1 == 1);
          $display("Time: %0t, INFO: test_IncrementExceedsMaxIncrement - observed the stimulus_s1.",
                   $time);
          // No expected output check for step 1 as per scenario description
          // Wait and compare expected output with observed output for step 2
          wait (stimulus_s2 == 1);
          $display("Time: %0t, INFO: test_IncrementExceedsMaxIncrement - observed the stimulus_s2.",
                   $time);
          expected_value_next = value + incr;  // Calculate expected value_next
          observed_value_next = value_next;  // Capture observed value_next
          if (expected_value_next != observed_value_next) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_IncrementExceedsMaxIncrement - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                $time, expected_value_next, observed_value_next);
          end else begin
            $display(
                "Time: %0t, INFO: test_IncrementExceedsMaxIncrement - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, expected_value_next, observed_value_next);
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_IncrementExceedsMaxIncrement", $time);
        end else begin
          $display("Time: %0t, FAILED: test_IncrementExceedsMaxIncrement", $time);
        end
        $display("Time: %0t, INFO: Finished: test_IncrementExceedsMaxIncrement", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_InitialValueExceedsMaxValue;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_InitialValueExceedsMaxValue", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_InitialValueExceedsMaxValue. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        bit stimulus_s1 = 0, stimulus_s2 = 0;
        bit is_pass = 1;
        int random_incr;
        logic [ValueWidth-1:0] expected_value_next;
        fork
          // Removed redundant begin-end block
          // Step 1: Apply reinit with initial_value exceeding MaxValue to trigger assertion
          $display(
              "Time: %0t, INFO: test_InitialValueExceedsMaxValue - Driving values: reinit=0x%h, initial_value=0x%h, incr_valid=0x%h, incr=0x%h",
              $time, 1, MaxValue + 1, 0, 0);
          reinit = 1;
          initial_value = MaxValue + 1;
          incr_valid = 0;
          incr = 0;
          @(posedge clk);
          reinit = 0;
          stimulus_s1 = 1;
          // Step 2: Check that the counter continues operation without automatic response
          random_incr = $urandom_range(0, MaxIncrement);
          $display(
              "Time: %0t, INFO: test_InitialValueExceedsMaxValue - Driving values: incr_valid=0x%h, incr=0x%h",
              $time, 1, random_incr);
          incr_valid = 1;
          incr = random_incr;
          @(posedge clk);
          incr_valid  = 0;
          stimulus_s2 = 1;
          // Removed redundant begin-end block
          // Wait and compare expected output with observed output for step 2
          wait (stimulus_s2 == 1);
          $display("Time: %0t, INFO: test_InitialValueExceedsMaxValue - observed the stimulus_s2.",
                   $time);
          expected_value_next = value + random_incr;
          @(posedge clk);
          if (value_next !== expected_value_next) begin
            is_pass = 0;
            $display(
                "Time: %0t, ERROR: test_InitialValueExceedsMaxValue - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                $time, expected_value_next, value_next);
          end else begin
            $display(
                "Time: %0t, INFO: test_InitialValueExceedsMaxValue - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                $time, expected_value_next, value_next);
          end
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_InitialValueExceedsMaxValue", $time);
        end else begin
          $display("Time: %0t, FAILED: test_InitialValueExceedsMaxValue", $time);
        end
        $display("Time: %0t, INFO: Finished: test_InitialValueExceedsMaxValue", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask

  task automatic test_IncrementAndInitialValueExceedLimits;
    fork
      begin
        $display("Time: %0t, INFO: Starting: test_IncrementAndInitialValueExceedLimits", $time);
        #(PER_TASK_TIMEOUT);
        $display(
            "Time: %0t, INFO: Timeout: test_IncrementAndInitialValueExceedLimits. Stimuli is not observed or it needs more time to finish this test.",
            $time);
      end
      begin
        // This task tests the behavior of the counter when both `reinit` and `incr_valid` are high,
        // and `initial_value` and `incr` exceed their respective limits. It checks that the counter
        // continues operation without automatic response despite exceeding limits.
        // Local variables declaration
        bit stimulus_s1 = 0, stimulus_s2 = 0;
        bit is_pass = 1;
        int MaxValue = 255;  // Example value, should be set according to the design
        int MaxIncrement = 15;  // Example value, should be set according to the design
        logic [31:0] observed_value, observed_value_next;  // Assuming 32-bit width for example
        logic [31:0] expected_value, expected_value_next;  // Assuming 32-bit width for example
        fork
          begin : simulation_thread
            // Step 1: Apply high signals to both reinit and incr_valid with initial_value and incr exceeding their limits
            $display(
                "Time: %0t, INFO: test_IncrementAndInitialValueExceedLimits - Driving values: reinit=0x%h, incr_valid=0x%h, initial_value=0x%h, incr=0x%h",
                $time, 1, 1, MaxValue + 1, MaxIncrement + 1);
            reinit = 1;
            incr_valid = 1;
            initial_value = MaxValue + 1;
            incr = MaxIncrement + 1;
            @(posedge clk);
            stimulus_s1 = 1;
            // Step 2: Check if the counter continues operation without automatic response despite exceeding limits
            $display(
                "Time: %0t, INFO: test_IncrementAndInitialValueExceedLimits - Driving values: No change, checking operation continuity",
                $time);
            @(posedge clk);
            stimulus_s2 = 1;
          end : simulation_thread
          begin : check_thread
            // Wait and compare expected output with observed output for step 1 if simulation step 1 has any expected output
            wait (stimulus_s1 == 1);
            $display(
                "Time: %0t, INFO: test_IncrementAndInitialValueExceedLimits - observed the stimulus_s1.",
                $time);
            // Wait and compare expected output with observed output for step 2 if simulation step 2 has any expected output
            wait (stimulus_s2 == 1);
            $display(
                "Time: %0t, INFO: test_IncrementAndInitialValueExceedLimits - observed the stimulus_s2.",
                $time);
            // Random values expected as per scenario description
            expected_value = $urandom();
            expected_value_next = $urandom();
            observed_value = value;
            observed_value_next = value_next;
            if (expected_value != observed_value) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementAndInitialValueExceedLimits - Detected mismatch in value. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value, observed_value);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementAndInitialValueExceedLimits - Output value is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value, observed_value);
            end
            if (expected_value_next != observed_value_next) begin
              is_pass = 0;
              $display(
                  "Time: %0t, ERROR: test_IncrementAndInitialValueExceedLimits - Detected mismatch in value_next. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value_next, observed_value_next);
            end else begin
              $display(
                  "Time: %0t, INFO: test_IncrementAndInitialValueExceedLimits - Output value_next is as expected. Expected: 0x%h, Observed: 0x%h",
                  $time, expected_value_next, observed_value_next);
            end
          end : check_thread
        join
        if (is_pass) begin
          $display("Time: %0t, PASSED: test_IncrementAndInitialValueExceedLimits", $time);
        end else begin
          $display("Time: %0t, FAILED: test_IncrementAndInitialValueExceedLimits", $time);
        end
        $display("Time: %0t, INFO: Finished: test_IncrementAndInitialValueExceedLimits", $time);
      end
    join_any
    disable fork;
    #(DRAIN_TIME);  // Wait for some time to observe the results
  endtask
endmodule
